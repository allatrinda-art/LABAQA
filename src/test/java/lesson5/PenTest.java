package lesson5;
import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

public class PenTest {

    @DataProvider(name = "Word less/equals ink")
    public Object[][] input1() {
        return new Object[][]{
                {6, 1.0, "Mango"},
                {5, 1.0, "Mango"},
                {5, 1.0, ""},
                {0, 1.0, ""},
                {6, 0.0, "Mango"}
                //{-10, 1.0, "Mango"} в другой метод
                //{10, -1.0, ""}
                //{-10, -1.0, ""}
                //{0, 0.0, ""}
        };    }

    @DataProvider(name = "Word more than ink")
    public Object[][] input2() {
        return new Object[][]{
                {4, 1.0, "Mango"},
                {4, 0.9, "Mango"},
                {5, 0.9, "Mango"}
        };    }

    @DataProvider(name = "Not enough ink")
    public Object[][] input3() {
        return new Object[][]{
                {5, 1.4, "Mango"}
        };    }

    @DataProvider(name = "Exact Ink Amount")
    public Object[][] input4() {
        return new Object[][]{
                {7, 1.4, "Mango"}
        };    }

    @DataProvider(name = "Letter Size less than 1")
    public Object[][] input5() {
        return new Object[][]{
                {5, 0.9, "Mango"}
        };    }

    @DataProvider(name = "Zero ink")
    public Object[][] input6() {
        return new Object[][]{
                {0, 1.0, "Mango"}
        };    }

    @DataProvider(name = "Words with space")
    public Object[][] input7() {
        return new Object[][]{
                {7, 1.0, "Mango Apple"},
               // {7, 1.0, " "},
                {6, 1.0, "Mango Apple"}
        };    }

    @DataProvider(name = "isWork has positive value")
    public Object[][] input8() {
        return new Object[][]{
                {10}
        };    }

    @DataProvider(name = "isWork has zero or negative value")
    public Object[][] input9() {
        return new Object[][]{
                {-10}, {0}
        };    }

    @DataProvider(name = "Color without color param")
    public Object[][] input10() {
        return new Object[][]{
                {10, 1.0}
        };    }

    @DataProvider(name = "Color with color param")
    public Object[][] input11() {
        return new Object[][]{
                {10, 1.0, "RED"}
        };    }

    @DataProvider(name = "doSomethingElse without color param")
    public Object[][] input12() {
        return new Object[][]{
                {10, 1.0}
        };    }

    @DataProvider(name = "doSomethingElse with color param")
    public Object[][] input13() {
        return new Object[][]{
                {10, 1.0, "RED"}
        };    }

    @Test (dataProvider = "Word less/equals ink")
    public void wordLessAndEqualsInkContainerValue(int inkContainerValue, double sizeLetter, String word) {
        Pen pen = new Pen(inkContainerValue, sizeLetter);
        String actual = pen.write(word);
        Assert.assertEquals(actual, word, "not enough ink");
    }

    @Test (dataProvider = "Word more than ink")
    public void wordMoreInkContainerValue(int inkContainerValue, double sizeLetter, String word) {
        Pen pen = new Pen(inkContainerValue, sizeLetter);
        String actual = pen.write(word);
        String expected = word.substring(0, inkContainerValue);
        Assert.assertEquals(actual, expected);
    }

    @Test(dataProvider = "Not enough ink")
    public void writeNotEnoughInk(int inkContainerValue, double sizeLetter, String word) {
        Pen pen = new Pen(inkContainerValue, sizeLetter);
        String actual = pen.write(word);
        String expected = word.substring(0, (int) (inkContainerValue / sizeLetter));
        Assert.assertNotEquals(actual.length(), expected.length());
    }

    @Test(dataProvider = "Exact Ink Amount")
    public void writeExactInkAmount(int inkContainerValue, double sizeLetter, String word) {
        Pen pen = new Pen(inkContainerValue, sizeLetter);
        String actual = pen.write(word);
        String expected = word.substring(0, (int) (inkContainerValue / sizeLetter));
        Assert.assertEquals(actual.length(), expected.length());
    }

    @Test(dataProvider = "Letter Size less than 1")
    public void writeSizeLetterLessThenOne(int inkContainerValue, double sizeLetter, String word) {
        Pen pen = new Pen(inkContainerValue, sizeLetter);
        String actual = pen.write(word);
        String expected = word.substring(0, (int) (inkContainerValue / sizeLetter));
        Assert.assertEquals(actual.length(), expected.length());
    }

    @Test(dataProvider = "Zero ink")
    public void writeZeroInk(int inkContainerValue, double sizeLetter, String word) {
        Pen pen = new Pen(inkContainerValue, sizeLetter);
        String actual = pen.write(word);
        Assert.assertTrue(actual.isEmpty());
    }

    @Test(dataProvider = "Words with space")
    public void twoWordsWithWhitespace(int inkContainerValue, double sizeLetter, String word) {
        Pen pen = new Pen(inkContainerValue, sizeLetter);
        String actual = pen.write(word);

        double requiredInkValue = word.replaceAll("\\s+", "").length() * sizeLetter;
        String expected = word.substring(0, (int) (inkContainerValue / sizeLetter)).replaceAll("\\s+", "");
        Assert.assertNotEquals(actual.length(), expected.length());
    }

    @Test(dataProvider = "isWork has positive value")
    public void isWorkTruePositiveValue(int inkContainerValue) {
        Pen pen = new Pen(inkContainerValue);
        Boolean condition = pen.isWork();
        Assert.assertTrue(condition, "Ручка пишет");
    }

    @Test(dataProvider = "isWork has zero or negative value")
    public void isWorkFalseZeroOrNegativeValue(int inkContainerValue) {
        Pen pen = new Pen(inkContainerValue);
        Boolean condition = pen.isWork();
        Assert.assertFalse(condition, "Ручка не пишет");
    }

    @Test(dataProvider = "Color without color param")
    public void getColorInitWithoutColorParam(int inkContainerValue, double sizeLetter) {
        Pen pen = new Pen(inkContainerValue, sizeLetter);
        String actualColor = pen.getColor();
        Assert.assertFalse(actualColor.isEmpty());
    }

    @Test(dataProvider = "Color with color param")
    public void getColorInitWithColorParam(int inkContainerValue, double sizeLetter, String expectedColor) {
        Pen pen = new Pen(inkContainerValue, sizeLetter, expectedColor);
        String actualColor = pen.getColor();
        Assert.assertNotEquals(actualColor, expectedColor);
    }

    @Test(dataProvider = "doSomethingElse without color param")
    public void doSomethingElseInitWithoutColorParam(int inkContainerValue, double sizeLetter) {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream printStream = new PrintStream(baos);

        Pen pen = new Pen(inkContainerValue, sizeLetter);
        System.setOut(printStream);
        pen.doSomethingElse();
        System.setOut(System.out);
        printStream.flush();

        String printActualColor = baos.toString().trim();
        Assert.assertFalse(printActualColor.isEmpty());
    }

    @Test(dataProvider = "doSomethingElse with color param")
    public void doSomethingElseInitWithColorParam(int inkContainerValue, double sizeLetter, String expectedColor) {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream printStream = new PrintStream(baos);

        Pen pen = new Pen(inkContainerValue, sizeLetter, expectedColor);
        System.setOut(printStream);
        pen.doSomethingElse();
        System.setOut(System.out);
        printStream.flush();

        String printActualColor = baos.toString().trim();
        Assert.assertEquals(printActualColor, expectedColor);
    }

    //TODO different variables - IndexOutOfBoundException

}