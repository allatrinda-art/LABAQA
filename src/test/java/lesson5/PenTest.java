package lesson5;

import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

public class PenTest {

    @DataProvider(name = "Word less/equals ink")
    public Object[][] input1() {
        return new Object[][]{
                {6, 1.0, "Mango"},
                {5, 1.0, "Mango"},
                {5, 1.0, ""},
                {0, 1.0, ""},
                {6, 0.0, "Mango"},
                {10, -1.0, ""},
                {-1, -1.0, ""},
                {0, 0.0, ""},
                {5, 1.0, "M"}
        };
    }

    @DataProvider(name = "Word Length More Than Ink Amount")
    public Object[][] input2() {
        return new Object[][]{
                {4, 1.0, "Mango"},
                {4, 0.9, "Mango"},
                {5, 0.9, "Mango"},
                {0, 1.0, "M"}
        };
    }

    @DataProvider(name = "Not enough ink")
    public Object[][] input3() {
        return new Object[][]{
                {5, 1.1, "Mango"},
                {4, 1.5, "Mango"}
        };
    }

    @DataProvider(name = "Word Length Is The Same As Ink Amount")
    public Object[][] input4() {
        return new Object[][]{
                {7, 1.4, "Mango"},
                {5, 1.0, "Mango"}
        };
    }

    @DataProvider(name = "Letter Size less/equals than 1")
    public Object[][] input5() {
        return new Object[][]{
                {5, 0.9, "Mango"},
                {1, 0.1, "MangoMango"}
        };
    }

    @DataProvider(name = "partOfWordException")
    public Object[][] input6() {
        return new Object[][]{
                {-1, 1.0, "Mango"},
                {-1, 1.0, ""},
                {2, 1.0, " "}
        };
    }

    @DataProvider(name = "Zero ink")
    public Object[][] input7() {
        return new Object[][]{
                {0, 1.0, "Mango"},
                {0, 1.0, " "},
                {0, 1.0, ""},
                {0, 0.0, ""}
        };
    }

    @DataProvider(name = "Words with Whitespace")
    public Object[][] input8() {
        return new Object[][]{
                {7, 1.0, "Mango Apple"},
                {6, 1.0, "Mango Apple"}
        };
    }

    @DataProvider(name = "isWork has positive value")
    public Object[][] input9() {
        return new Object[][]{
                {10}
        };
    }

    @DataProvider(name = "isWork has zero or negative value")
    public Object[][] input10() {
        return new Object[][]{
                {-10},
                {0}
        };
    }

    @DataProvider(name = "Color without color param")
    public Object[][] input11() {
        return new Object[][]{
                {10, 1.0}
        };
    }

    @DataProvider(name = "Color with color param")
    public Object[][] input12() {
        return new Object[][]{
                {10, 1.0, "RED"},
                {0, 0.0, ""},
                {0, 0.0, " "},
                {0, 0.0, "0"}
        };
    }

    @DataProvider(name = "doSomethingElse without color param")
    public Object[][] input13() {
        return new Object[][]{
                {10, 1.0}
        };
    }

    @DataProvider(name = "doSomethingElse with color param")
    public Object[][] input14() {
        return new Object[][]{
                {10, 1.0, "RED"},
                {10, 1.0, "White"},
                {0, 0.0, ""}
        };
    }

    @DataProvider(name = "doSomethingElse with color param whitespace")
    public Object[][] input15() {
        return new Object[][]{
                {10, 1.0, " "},
                {10, 1.0, " RED"},
                {0, 0.0, "GREEN "}
        };
    }

    @DataProvider(name = "negative ink amount")
    public Object[][] input16() {
        return new Object[][]{
                {-1, 1.0, "Mango"},
                {-1, 0.0, ""},
                {-1, -1.0, " "}
        };
    }

    @DataProvider(name = "Constructor data 1")
    public Object[][] input17() {
        return new Object[][]{
                {10}
        };
    }

    @DataProvider(name = "Constructor data 2")
    public Object[][] input18() {
        return new Object[][]{
                {10, 1.5}
        };
    }

    @DataProvider(name = "Constructor data 3")
    public Object[][] input19() {
        return new Object[][]{
                {10, 1.5, "RED"}
        };
    }

    @Test(dataProvider = "Word less/equals ink")
    public void wordLessOrEqualsInkContainerValueTest(int inkContainerValue, double sizeLetter, String word) {
        Pen pen = new Pen(inkContainerValue, sizeLetter);
        String actual = pen.write(word);
        Assert.assertEquals(actual, word, "not enough ink");
    }

    @Test(dataProvider = "Word Length More Than Ink Amount")
    public void wordLengthMoreThanInkContainerValueTest(int inkContainerValue, double sizeLetter, String word) {
        Pen pen = new Pen(inkContainerValue, sizeLetter);
        String actual = pen.write(word);
        String expected = word.substring(0, inkContainerValue);
        Assert.assertEquals(actual, expected);
    }

    @Test(dataProvider = "Letter Size less/equals than 1")
    public void sizeLetterLessThanOneTest(int inkContainerValue, double sizeLetter, String word) {
        Pen pen = new Pen(inkContainerValue, sizeLetter);
        String actual = pen.write(word);
        Assert.assertEquals(actual, word);
    }

    @Test(dataProvider = "partOfWordException", expectedExceptions = {StringIndexOutOfBoundsException.class})
    public void partOfWordExceptionTest(int inkContainerValue, double sizeLetter, String word) {
        word.substring(0, inkContainerValue);
    }

    @Test(dataProvider = "Not enough ink")
    public void writeNotEnoughInkInPenTest(int inkContainerValue, double sizeLetter, String word) {
        Pen pen = new Pen(inkContainerValue, sizeLetter);
        String actual = pen.write(word);
        String expected = word.substring(0, (int) (inkContainerValue / sizeLetter));
        Assert.assertNotEquals(actual.length(), expected.length(), "Pen has enough ink to write word");
    }

    @Test(dataProvider = "Word Length Is The Same As Ink Amount")
    public void wordLengthIsTheSameAsInkAmountTest(int inkContainerValue, double sizeLetter, String word) {
        Pen pen = new Pen(inkContainerValue, sizeLetter);
        String actual = pen.write(word);
        Assert.assertEquals(actual, word);
    }

    @Test(dataProvider = "Zero ink")
    public void zeroInkContainerValueTest(int inkContainerValue, double sizeLetter, String word) {
        Pen pen = new Pen(inkContainerValue, sizeLetter);
        String actual = pen.write(word);
        Assert.assertTrue(actual.isEmpty(), "Pen has enough ink to write word");
    }

    @Test(dataProvider = "Words with Whitespace")
    public void twoWordsWithWhitespaceTest(int inkContainerValue, double sizeLetter, String word) {
        Pen pen = new Pen(inkContainerValue, sizeLetter);
        String actual = pen.write(word);
        String expected = word.replaceAll("\\s+", "").substring(0, inkContainerValue);
        Assert.assertNotEquals(actual, expected);
    }

    @Test(dataProvider = "isWork has positive value")
    public void isWorkTruePositiveValueTest(int inkContainerValue) {
        Pen pen = new Pen(inkContainerValue);
        Boolean condition = pen.isWork();
        Assert.assertTrue(condition, "Pen works");
    }

    @Test(dataProvider = "isWork has zero or negative value")
    public void isWorkFalseZeroOrNegativeValueTest(int inkContainerValue) {
        Pen pen = new Pen(inkContainerValue);
        Boolean condition = pen.isWork();
        Assert.assertFalse(condition, "Pen doesn't work");
    }

    @Test(dataProvider = "Color without color param")
    public void getPenColorIfInitWithoutColorParamTest(int inkContainerValue, double sizeLetter) {
        Pen pen = new Pen(inkContainerValue, sizeLetter);
        String actualColor = pen.getColor();
        Assert.assertFalse(actualColor.isEmpty());
    }

    @Test(dataProvider = "Color with color param")
    public void getPenColorIfInitWithColorParamTest(int inkContainerValue, double sizeLetter, String expectedColor) {
        Pen pen = new Pen(inkContainerValue, sizeLetter, expectedColor);
        String actualColor = pen.getColor();
        Assert.assertNotEquals(actualColor, expectedColor);
    }

    @Test(dataProvider = "doSomethingElse without color param")
    public void doSomethingElseInitPenWithoutColorParamTest(int inkContainerValue, double sizeLetter) {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream printStream = new PrintStream(baos);

        Pen pen = new Pen(inkContainerValue, sizeLetter);
        System.setOut(printStream);
        pen.doSomethingElse();
        System.setOut(System.out);
        printStream.flush();

        String printActualColor = baos.toString().trim();
        Assert.assertFalse(printActualColor.isEmpty());
    }

    @Test(dataProvider = "doSomethingElse with color param")
    public void doSomethingElseInitPenWithColorParamTest(int inkContainerValue, double sizeLetter, String expectedColor) {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream printStream = new PrintStream(baos);

        Pen pen = new Pen(inkContainerValue, sizeLetter, expectedColor);
        System.setOut(printStream);
        pen.doSomethingElse();
        System.setOut(System.out);
        printStream.flush();

        String printActualColor = baos.toString().trim();
        Assert.assertEquals(printActualColor, expectedColor);
    }

    @Test(dataProvider = "doSomethingElse with color param whitespace")
    public void doSomethingElseInitPenWithColorParamWhitespaceTest(int inkContainerValue, double sizeLetter, String expectedColor) {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream printStream = new PrintStream(baos);

        Pen pen = new Pen(inkContainerValue, sizeLetter, expectedColor);
        System.setOut(printStream);
        pen.doSomethingElse();
        System.setOut(System.out);
        printStream.flush();

        String printActualColor = baos.toString().trim();
        Assert.assertNotEquals(printActualColor, expectedColor);
    }

    @Test(dataProvider = "negative ink amount")
    public void notEnoughInkContainerValueToWriteAnyWordTest(int inkContainerValue, double sizeLetter, String word) {
        Pen pen = new Pen(inkContainerValue, sizeLetter);
        String actual = pen.write(word);
        String expected = "";
        Assert.assertEquals(actual, expected);
    }

    @Test(dataProvider = "Constructor data 1")
    public void constructorOneParamTest(int inkContainerValue) {
        Pen pen = new Pen(inkContainerValue);
        Assert.assertNotNull(pen);
    }

    @Test(dataProvider = "Constructor data 2")
    public void constructorTwoParamsTest(int inkContainerValue, double sizeLetter) {
        Pen pen = new Pen(inkContainerValue, sizeLetter);
        Assert.assertNotNull(pen);
    }

    @Test(dataProvider = "Constructor data 3")
    public void constructorAllParamsTest(int inkContainerValue, double sizeLetter, String color) {
        Pen pen = new Pen(inkContainerValue, sizeLetter, color);
        Assert.assertNotNull(pen);
    }
}